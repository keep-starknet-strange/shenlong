type felt = felt;
type Tuple<felt, felt, felt> = Struct<ut@Tuple, felt, felt, felt>;

libfunc dup<felt> = dup<felt>;
libfunc felt_add = felt_add;
libfunc struct_construct<Tuple<felt, felt, felt>> = struct_construct<Tuple<felt, felt, felt>>;
libfunc store_temp<Tuple<felt, felt, felt>> = store_temp<Tuple<felt, felt, felt>>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_const<2> = felt_const<2>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc function_call<user@multiple_return::multiple_return::multiret> = function_call<user@multiple_return::multiple_return::multiret>;
libfunc struct_deconstruct<Tuple<felt, felt, felt>> = struct_deconstruct<Tuple<felt, felt, felt>>;

dup<felt>([0]) -> ([0], [3]);
dup<felt>([1]) -> ([1], [4]);
felt_add([3], [4]) -> ([2]);
struct_construct<Tuple<felt, felt, felt>>([0], [1], [2]) -> ([5]);
store_temp<Tuple<felt, felt, felt>>([5]) -> ([6]);
return([6]);
felt_const<1>() -> ([0]);
felt_const<2>() -> ([1]);
store_temp<felt>([0]) -> ([3]);
store_temp<felt>([1]) -> ([4]);
function_call<user@multiple_return::multiple_return::multiret>([3], [4]) -> ([2]);
struct_deconstruct<Tuple<felt, felt, felt>>([2]) -> ([5], [6], [7]);
struct_construct<Tuple<felt, felt, felt>>([5], [6], [7]) -> ([8]);
store_temp<Tuple<felt, felt, felt>>([8]) -> ([9]);
return([9]);

multiple_return::multiple_return::multiret@0([0]: felt, [1]: felt) -> (Tuple<felt, felt, felt>);
multiple_return::multiple_return::main@6() -> (Tuple<felt, felt, felt>);
