type [0] = felt;
type [1] = NonZero<[0]>;
type [2] = Struct<ut@Tuple, [0], [0]>;

libfunc [17] = revoke_ap_tracking;
libfunc [6] = dup<[0]>;
libfunc [0] = felt_jump_nz;
libfunc [7] = branch_align;
libfunc [8] = drop<[0]>;
libfunc [9] = felt_const<0>;
libfunc [1] = struct_construct<[2]>;
libfunc [13] = store_temp<[2]>;
libfunc [14] = rename<[2]>;
libfunc [10] = jump;
libfunc [11] = drop<[1]>;
libfunc [2] = felt_add;
libfunc [12] = felt_const<1>;
libfunc [3] = felt_sub;
libfunc [15] = store_temp<[0]>;
libfunc [16] = rename<[0]>;
libfunc [4] = function_call<user@[0]>;
libfunc [5] = struct_deconstruct<[2]>;

[17]() -> ();
[6]([2]) -> ([2], [3]);
[0]([3]) { fallthrough() 11([4]) };
[7]() -> ();
[8]([1]) -> ();
[8]([2]) -> ();
[9]() -> ([5]);
[1]([0], [5]) -> ([6]);
[13]([6]) -> ([6]);
[14]([6]) -> ([7]);
[10]() { 30() };
[7]() -> ();
[11]([4]) -> ();
[6]([1]) -> ([1], [9]);
[2]([0], [9]) -> ([8]);
[12]() -> ([10]);
[3]([2], [10]) -> ([11]);
[15]([1]) -> ([13]);
[15]([8]) -> ([8]);
[16]([8]) -> ([14]);
[15]([11]) -> ([11]);
[16]([11]) -> ([15]);
[4]([13], [14], [15]) -> ([12]);
[5]([12]) -> ([16], [17]);
[12]() -> ([18]);
[2]([17], [18]) -> ([19]);
[1]([16], [19]) -> ([20]);
[13]([20]) -> ([20]);
[14]([20]) -> ([21]);
[14]([21]) -> ([7]);
[14]([7]) -> ([22]);
return([22]);

[0]@0([0]: [0], [1]: [0], [2]: [0]) -> ([2]);